#include "iostream"

using namespace std;

// Function to maintain heap property
// TC: O(log n), where n is the size of the heap
void heapify(int arr[], int i, int n)
{
    int largest = i; // Initialize largest as root
    int l = 2 * i + 1; // left child
    int r = 2 * i + 2; // right child

    // If left child is larger than root
    if (l < n && arr[l] > arr[largest])
    {
        largest = l;
    }

    // If right child is larger than largest so far
    if (r < n && arr[r] > arr[largest])
    {
        largest = r;
    }

    // If largest is not root
    if (largest != i)
    {
        swap(arr[largest], arr[i]); // Swap root with the largest child
        heapify(arr, largest, n); // Recursively heapify the affected sub-tree
    }
}

// Function to perform Heap Sort
// TC: O(n log n), where n is the size of the array
void heapSort(int arr[], int n)
{
    // Build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--)
    {
        heapify(arr, i, n);
    }

    // Extract elements from heap one by one
    for (int i = n - 1; i >= 0; i--)
    {
        swap(arr[0], arr[i]); // Move current root to end
        heapify(arr, 0, i); // Call heapify on the reduced heap
    }
}

// Function to print the array
// TC: O(n), where n is the size of the array
void printArray(int arr[], int n)
{
    cout << "\n[";
    for (int i = 0; i < n; i++)
    {
        cout << arr[i];
        if (i != n - 1)
        {
            cout << ", ";
        }
    }
    cout << "]";
}

int main()
{
    int arr[] = {8, 2, 20, 10, 5, 30, 15, 25, 40, 35};
    int n = sizeof(arr) / sizeof(arr[0]);

    cout << "Original Array:";
    printArray(arr, n);

    heapSort(arr, n); // Apply heap sort

    cout << "Sorted Array:";
    printArray(arr, n);

    return 0;
}
